% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/constructive.R
\name{construct}
\alias{construct}
\alias{construct_multi}
\title{\code{construct()} builds the code to reproduce one object, \code{construct_multi()}
builds the code to reproduce objects stored in a named list or environment.}
\usage{
construct(
  x,
  ...,
  data = NULL,
  pipe = c("base", "magrittr"),
  check = NULL,
  ignore_srcref = TRUE,
  ignore_attr = FALSE,
  ignore_function_env = FALSE,
  ignore_formula_env = FALSE,
  one_liner = FALSE,
  template = getOption("constructive_opts_template")
)

construct_multi(
  x,
  ...,
  data = NULL,
  pipe = c("base", "magrittr"),
  check = NULL,
  ignore_srcref = TRUE,
  ignore_attr = FALSE,
  ignore_function_env = FALSE,
  ignore_formula_env = FALSE,
  one_liner = FALSE,
  template = getOption("constructive_opts_template")
)
}
\arguments{
\item{x}{An object}

\item{...}{Constructive options built with the \verb{opts_*()} family of functions. See the "Constructive options"
section below.}

\item{data}{named list of objects we don't want to deparse, can also be a package
name and its namespace and datasets will be used to look for objects. Both can
be combined so you can provide a list of named objects and unnamed namespaces.}

\item{pipe}{Which pipe to use, either "base" or "magrittr"}

\item{check}{Boolean. Whether to check if the created code reproduces the object
using \code{waldo::compare()}}

\item{ignore_srcref, ignore_attr, ignore_function_env, ignore_formula_env}{passed to \code{waldo::compare()}}

\item{one_liner}{Boolean. Whether to collapse the output to a single line of code.}

\item{template}{A list of constructive options build with \verb{opts_*()} functions,
they will be overriden by \code{...}. This is designed to help users set a default
behavior for \code{{constructive}}.}
}
\value{
An object of class 'constructive'
}
\description{
\code{construct()} builds the code to reproduce one object, \code{construct_multi()}
builds the code to reproduce objects stored in a named list or environment.
}
\section{Constructive options}{


Constructive options provide a way to customize the output of \code{construct()}.
We can provide calls to \verb{opts_*()} functions to the \code{...} argument. Each of
these functions targets a specific element type and is documented on its own page.
\itemize{
\item \code{\link[=opts_atomic]{opts_atomic()}}
\item \code{\link[=opts_data.frame]{opts_data.frame()}}
\item \code{\link[=opts_Date]{opts_Date()}}
\item \code{\link[=opts_environment]{opts_environment()}}
\item \code{\link[=opts_formula]{opts_formula()}}
\item \code{\link[=opts_factor]{opts_factor()}}
\item \code{\link[=opts_function]{opts_function()}}
\item \code{\link[=opts_list]{opts_list()}}
\item \code{\link[=opts_ordered]{opts_ordered()}}
\item \code{\link[=opts_POSIXct]{opts_POSIXct()}}
\item \code{\link[=opts_tbl_df]{opts_tbl_df()}}
}

In particular by default the environments of functions and formulas are not reconstructed,
and \code{opts_formula()} and \code{opts_function()} help you adjust this behavior.
Note that objects referring to environment often can't be reconstructed faithfully.
Some compromises have to be made and \code{opts_environment()} helps you make them.
Other \verb{opts_*()} functions have a purely cosmetic effect.
}

