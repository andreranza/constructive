% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/function.R
\name{opts_function}
\alias{opts_function}
\title{Constructive options for functions}
\usage{
opts_function(
  constructor = c("function", "as.function", "new_function"),
  ...,
  zap_srcref = FALSE,
  environment = constructor != "function",
  trim = NULL
)
}
\arguments{
\item{constructor}{String. Name of the function used to construct the environment, see Details section.}

\item{...}{Should not be used. Forces passing arguments by name.}

\item{zap_srcref}{Boolean. Whether to pipe the output to \code{rlang::zapo_srcref()} which will
get rid recursively of all srcref related attributes.}

\item{environment}{Boolean. Whether to attempt to reconstruct the function's environment,
\code{FALSE} by default with the default \code{"function"} constructor. \code{TRUE} by default otherwise.}

\item{trim}{\code{NULL} or integerish. Maximum of lines showed in the body before it's trimmed,
replacing code with \code{...}. Note that it will necessarily produce code that doesn't
reproduce the input, this will parse and evaluate without failure.}
}
\value{
An object of class <constructive_options/constructive_options_function>
}
\description{
These options will be used on functions, i.e. objects of type "closure", "special" and "builtin".
}
\details{
Depending on \code{constructor}, we construct the environment as follows:
\itemize{
\item \code{"function"} (default): Build the object using a standard \code{function() {}}
definition. This won't set the environment by default, unless \code{environment}
is set to \code{TRUE}
\item \code{"as.function"} : Build the object using a \code{as.function()} call, by default will
attempt to recreate the environment.
back to \code{data.frame()}.
\item \code{"new_function"} : Build the object using a \code{rlang::new_function()} call, by default will
attempt to recreate the environment.
}
}
