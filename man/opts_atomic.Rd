% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/atomic.R
\name{opts_atomic}
\alias{opts_atomic}
\title{Constructive options for atomic types}
\usage{
opts_atomic(..., trim = NULL, fill = c("default", "rlang", "+", "...", "none"))
}
\arguments{
\item{trim}{\code{NULL} or integerish. Maximum of elements showed before it's trimmed.
Note that it will necessarily produce code that doesn't reproduce the input.
This code will parse without failure but its evaluation might fail.}

\item{fill}{String. Method to use to represent the trimmed elements.

If \code{trim} is provided, depending on \code{fill} we will present trimmed elements as followed:
\itemize{
\item \code{"default"} : Use default atomic constructors, so for instance \code{c("a", "b", "c")} might become \code{c("a", character(2))}.
\item \code{"rlang"} : Use rlang atomic constructors, so for instance \code{c("a", "b", "c")} might become \code{c("a", rlang::new_character(2))},
these \code{rlang} constructors create vectors of \code{NAs}, so it's different from the default option.
\item \code{"+"}: Use unary \code{+}, so for instance \code{c("a", "b", "c")} might become \code{c("a", +2)}.
\item \code{"..."}: Use \code{...}, so for instance \code{c("a", "b", "c")} might become \code{c("a", ...)}
\item \code{"none"}: Don't represent trimmed elements.
}}
}
\value{
An object of class <constructive_options/constructive_options_atomic>
}
\description{
These options will be used on atomic types ("logical", "integer", "numeric", "complex", "character" and "raw")
}
