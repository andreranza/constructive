% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/construct_idiomatic.R
\name{construct_apply}
\alias{construct_apply}
\title{construct_apply}
\usage{
construct_apply(
  args,
  fun = "list",
  ...,
  keep_trailing_comma = FALSE,
  language = FALSE,
  implicit_names = FALSE,
  new_line = TRUE,
  one_liner = FALSE
)
}
\arguments{
\item{args}{Arguments to construct recursively, or code if \code{language = TRUE}}

\item{fun}{The function name to use to build code of the form "fun(...)"}

\item{...}{options passed recursively to the further methods}

\item{keep_trailing_comma}{leave a trailing comma after the last argument if
the code is multiline, some constructors allow it (e.g. \code{tibble::tibble()}) and it makes for nicer
diffs in version control.}

\item{language}{Whether to use the args as they are or to recurse, should be renamed to \code{recurse} (and negated)}

\item{implicit_names}{When data is provided, compress calls of the form \code{f(a = a)} to \code{f(a)}}

\item{new_line}{passed to wrap to remove add a line after "fun(" and before ")", forced to
\code{FALSE} if \code{one_liner} is \code{TRUE}}

\item{one_liner}{Whether to return a one line call.}
}
\value{
A character vector of code
}
\description{
construct_apply
}
\examples{
construct_apply(list(a=a), "foo", data = list(a=1), template = NULL, implicit_names = TRUE)
}
