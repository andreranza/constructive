% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/construct_reprex.R
\name{construct_reprex}
\alias{construct_reprex}
\title{construct_reprex}
\usage{
construct_reprex(n = 0, include_call = TRUE, ...)
}
\arguments{
\item{n}{The number of steps to go up on the call stack}

\item{include_call}{Whether to include the call to the function that created the next
frame, ignored for \code{n == 0}}

\item{...}{Forwarded to \code{construct_multi()}}
}
\value{
Returns return \code{NULL} invisibly, called for side-effects.
}
\description{
\code{construct_reprex()} creates a reprex that constructs the local environment,
or a caller environment \code{n} steps above. If \code{n > 0} the function call
is included by default.
}
\details{
\code{construct_reprex()} wraps \code{construct_multi()} and is thus able to construct
unevaluated arguments using \code{delayedAssign()}. This means we can construct
reprexes for functions that use Non Standard Evaluation.

A useful trick is to use \code{construct_reprex()} with \code{options(error = recover)}
to be able to reproduce an error.
}
